// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Jest = require("@glennsl/bs-jest/src/jest.js");
var Json = require("@glennsl/bs-json/src/Json.bs.js");
var Tenant = require("../src/SF/Tenant.bs.js");
var Project = require("../src/SF/Project.bs.js");
var Belt_List = require("bs-platform/lib/js/belt_List.js");
var Resources = require("../src/SF/Resources.bs.js");
var Connection = require("../src/SF/Connection.bs.js");

Jest.describe("Test resources JSON parsing", (function (param) {
        Jest.test("parse tenant object", (function (param) {
                var tenant = Tenant.parse(Json.parseOrRaise("\n        {\n          \"default-connection\": \"rdoproject.org\",\n          \"description\": \"The rdoproject.org tenant\",\n          \"tenant-options\": {\n              \"zuul/report-build-page\": true,\n              \"zuul/web-root\": \"https://review.rdoproject.org/zuul/\"\n          },\n          \"url\": \"https://review.rdoproject.org/manage\",\n          \"name\": \"rdoproject.org\"\n        }\n      "));
                return Jest.Expect.toBe("rdoproject.org", Jest.Expect.expect(tenant.name));
              }));
        Jest.test("parse connection object", (function (param) {
                var parsed = Connection.parse(Json.parseOrRaise("\n        {\n          \"base-url\": \"https://pagure.io\",\n          \"type\": \"pagure\",\n          \"name\": \"pagure.io\"\n        }\n      "));
                return Jest.Expect.toBe("pagure.io", Jest.Expect.expect(parsed.name));
              }));
        Jest.test("parse project object", (function (param) {
                var parsed = Project.parse(Json.parseOrRaise("\n        {\n          \"contacts\": [\n            \"harrymichal@seznam.cz\"\n          ],\n          \"description\": \"Unprivileged development environment\",\n          \"tenant\": \"local\",\n          \"website\": \"https://github.com/debarshiray/toolbox\",\n          \"name\": \"toolbox\",\n          \"source-repositories\": [\n            {\n              \"containers/toolbox\": {\n                \"connection\": \"github.com\",\n                \"zuul/exclude-unprotected-branches\": true\n              }\n            },\n            \"software-factory/cauth\",\n            {\n              \"software-factory/managesf\": {}\n            }\n          ]\n        }\n      "));
                return Jest.Expect.toBe("toolbox", Jest.Expect.expect(parsed.name));
              }));
        return Jest.test("parse resources object", (function (param) {
                      var parsed = Resources.parse(Json.parseOrRaise("\n        {\n          \"resources\": {\n              \"tenants\": {\n                  \"rdoproject.org\": {\n                      \"default-connection\": \"rdoproject.org\",\n                      \"description\": \"The rdoproject.org tenant\",\n                      \"url\": \"https://review.rdoproject.org/manage\",\n                      \"name\": \"rdoproject.org\"\n                  }\n              },\n              \"connections\": {\n                  \"github.com\": {\n                      \"base-url\": \"https://github.com\",\n                      \"type\": \"github\",\n                      \"name\": \"github.com\"\n                  }\n              },\n              \"projects\": {\n                  \"toolbox\": {\n                      \"description\": \"Unprivileged development environment\",\n                      \"tenant\": \"local\",\n                      \"name\": \"toolbox\",\n                      \"source-repositories\": []\n                  }\n              }\n          }\n      }\n      "));
                      var isToolbox = function (project) {
                        return project.name === "toolbox";
                      };
                      var maybeToolbox = Belt_List.get(Belt_List.keep(parsed.resources.projects, isToolbox), 0);
                      var my_assert = maybeToolbox !== undefined;
                      return Jest.Expect.toBe(true, Jest.Expect.expect(my_assert));
                    }));
      }));

/*  Not a pure module */
